<?php

namespace Drupal\baz\Plugin\EntityReferenceSelection;

use Drupal\Core\Entity\EntityReferenceSelection\SelectionInterface;


/**
 * @EntityReferenceSelection(
 *  id = "entity_reference_selection",
 *  label = @Translation("The plugin ID."),
 *  group = "string",
 *  entity_types = "array (optional)",
 *  weight = "int",
 * )
 */
class MyActionPlan implements  SelectionInterface {


    /**
    * {@inheritdoc}
    */
    public function build() {
    $build = [];

    // Implement your logic

    return $build;
    }

      /**
      * {@inheritdoc}
      */
      public function getReferenceableEntities($match = NULL, $match_operator = 'CONTAINS', $limit = 0) {
        // Gets the list of referenceable entities.
      }
      /**
      * {@inheritdoc}
      */
      public function countReferenceableEntities($match = NULL, $match_operator = 'CONTAINS') {
        // Counts entities that are referenceable.
      }
      /**
      * {@inheritdoc}
      */
      public function validateReferenceableEntities(array $ids) {
        // Validates which existing entities can be referenced.
      }
      /**
      * {@inheritdoc}
      */
      public function entityQueryAlter(SelectInterface $query) {
        // Allows the selection to alter the SelectQuery generated by EntityFieldQuery.
      }
      /**
      * {@inheritdoc}
      */
      public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
        // Form constructor.
      }
      /**
      * {@inheritdoc}
      */
      public function validateConfigurationForm(array &$form, FormStateInterface $form_state) {
        // Form validation handler.
      }
      /**
      * {@inheritdoc}
      */
      public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
        // Form submission handler.
      }
  
}
